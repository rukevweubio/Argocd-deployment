{"ast":null,"code":"import React,{useState,useEffect}from'react';// Main App component for the Tic-Tac-Toe game\nimport{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";function App(){const[board,setBoard]=useState(Array(9).fill(null));// Represents the 3x3 board\nconst[currentPlayer,setCurrentPlayer]=useState('X');// 'X' or 'O'\nconst[winner,setWinner]=useState(null);// 'X', 'O', 'Draw', or null\nconst[gameId,setGameId]=useState(null);// Unique ID for the current game\nconst[message,setMessage]=useState('Starting a new game...');// User messages\n// Determine the backend URL.\n// In a browser environment, 'process.env' is not available.\n// For local development or direct browser execution, we hardcode the URL.\n// In a Kubernetes deployment, this value would be dynamically injected via the Deployment manifest.\nconst BACKEND_URL='http://localhost:8080';// Hardcoded for direct browser execution\n// Function to start a new game on the backend\nconst startNewGame=async()=>{try{setMessage('Creating new game...');const response=await fetch(`${BACKEND_URL}/api/games`,{method:'POST',headers:{'Content-Type':'application/json'}});if(!response.ok){throw new Error(`HTTP error! status: ${response.status}`);}const data=await response.json();setGameId(data.gameId);setBoard(data.board);setCurrentPlayer(data.currentPlayer);setWinner(data.winner);setMessage(`Game ${data.gameId} started! It's ${data.currentPlayer}'s turn.`);}catch(error){console.error('Error starting new game:',error);setMessage(`Error starting game: ${error.message}. Is backend running at ${BACKEND_URL}?`);}};// Function to fetch the current game state from the backend\nconst fetchGameState=async()=>{if(!gameId)return;// Only fetch if a game ID exists\ntry{const response=await fetch(`${BACKEND_URL}/api/games/${gameId}`);if(!response.ok){throw new Error(`HTTP error! status: ${response.status}`);}const data=await response.json();setBoard(data.board);setCurrentPlayer(data.currentPlayer);setWinner(data.winner);if(data.winner){setMessage(data.winner==='Draw'?'It\\'s a Draw!':`Player ${data.winner} Wins!`);}else{setMessage(`Game ${gameId}. It's ${data.currentPlayer}'s turn.`);}}catch(error){console.error('Error fetching game state:',error);setMessage(`Error fetching game state: ${error.message}.`);}};// Function to handle a square click and send the move to the backend\nconst handleSquareClick=async index=>{if(board[index]||winner){return;// If square is already filled or game is over, do nothing\n}try{setMessage(`Making move for ${currentPlayer}...`);const response=await fetch(`${BACKEND_URL}/api/games/${gameId}/move`,{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({index,player:currentPlayer})});if(!response.ok){const errorData=await response.json();throw new Error(errorData.message||`HTTP error! status: ${response.status}`);}const data=await response.json();setBoard(data.board);setCurrentPlayer(data.currentPlayer);setWinner(data.winner);if(data.winner){setMessage(data.winner==='Draw'?'It\\'s a Draw!':`Player ${data.winner} Wins!`);}else{setMessage(`Game ${gameId}. It's ${data.currentPlayer}'s turn.`);}}catch(error){console.error('Error making move:',error);setMessage(`Error making move: ${error.message}`);}};// Effect to start a new game when the component mounts\nuseEffect(()=>{startNewGame();},[]);// Empty dependency array means this runs once on mount\n// Effect to fetch game state periodically or after a move (optional, but good for sync)\n// For simplicity, we're relying on the POST response for updates, but a GET poll could be added.\n// useEffect(() => {\n//   const interval = setInterval(() => {\n//     if (gameId && !winner) {\n//       fetchGameState();\n//     }\n//   }, 3000); // Poll every 3 seconds\n//   return () => clearInterval(interval);\n// }, [gameId, winner]);\n// Square component for rendering individual cells\nconst Square=_ref=>{let{value,onClick}=_ref;return/*#__PURE__*/_jsx(\"button\",{className:\"w-24 h-24 bg-white border-2 border-gray-300 rounded-lg flex items-center justify-center text-5xl font-bold text-gray-800 shadow-md hover:bg-gray-100 transition-colors duration-200 ease-in-out\",onClick:onClick,children:value});};return/*#__PURE__*/_jsxs(\"div\",{className:\"min-h-screen bg-gradient-to-br from-blue-500 to-purple-600 flex flex-col items-center justify-center p-4 font-inter\",children:[/*#__PURE__*/_jsx(\"style\",{children:`\n          @import url('https://fonts.googleapis.com/css2?family=Inter:wght@400;700&display=swap');\n          body { font-family: 'Inter', sans-serif; }\n        `}),/*#__PURE__*/_jsxs(\"div\",{className:\"bg-white p-8 rounded-xl shadow-2xl max-w-md w-full text-center\",children:[/*#__PURE__*/_jsx(\"h1\",{className:\"text-4xl font-bold text-gray-800 mb-6\",children:\"Tic-Tac-Toe\"}),/*#__PURE__*/_jsx(\"p\",{className:\"text-lg text-gray-600 mb-4\",children:message}),/*#__PURE__*/_jsx(\"div\",{className:\"grid grid-cols-3 gap-4 mb-6\",children:board.map((value,i)=>/*#__PURE__*/_jsx(Square,{value:value,onClick:()=>handleSquareClick(i)},i))}),winner&&/*#__PURE__*/_jsx(\"button\",{className:\"bg-green-500 hover:bg-green-600 text-white font-bold py-3 px-6 rounded-lg shadow-lg transition-all duration-230 ease-in-out transform hover:scale-105 focus:outline-none focus:ring-4 focus:ring-green-300\",onClick:startNewGame,children:\"Play Again!\"}),!winner&&gameId&&/*#__PURE__*/_jsx(\"button\",{className:\"bg-blue-500 hover:bg-blue-600 text-white font-bold py-3 px-6 rounded-lg shadow-lg transition-all duration-230 ease-in-out transform hover:scale-105 focus:outline-none focus:ring-4 focus:ring-blue-300\",onClick:startNewGame,children:\"New Game\"})]})]});}export default App;","map":{"version":3,"names":["React","useState","useEffect","jsx","_jsx","jsxs","_jsxs","App","board","setBoard","Array","fill","currentPlayer","setCurrentPlayer","winner","setWinner","gameId","setGameId","message","setMessage","BACKEND_URL","startNewGame","response","fetch","method","headers","ok","Error","status","data","json","error","console","fetchGameState","handleSquareClick","index","body","JSON","stringify","player","errorData","Square","_ref","value","onClick","className","children","map","i"],"sources":["/workspaces/Argocd-deployment/Argocd-deployment-gke/tic-tac-toe-project/tic-tac-toe-frontend/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\n\n// Main App component for the Tic-Tac-Toe game\nfunction App() {\n  const [board, setBoard] = useState(Array(9).fill(null)); // Represents the 3x3 board\n  const [currentPlayer, setCurrentPlayer] = useState('X'); // 'X' or 'O'\n  const [winner, setWinner] = useState(null); // 'X', 'O', 'Draw', or null\n  const [gameId, setGameId] = useState(null); // Unique ID for the current game\n  const [message, setMessage] = useState('Starting a new game...'); // User messages\n\n  // Determine the backend URL.\n  // In a browser environment, 'process.env' is not available.\n  // For local development or direct browser execution, we hardcode the URL.\n  // In a Kubernetes deployment, this value would be dynamically injected via the Deployment manifest.\n  const BACKEND_URL = 'http://localhost:8080'; // Hardcoded for direct browser execution\n\n  // Function to start a new game on the backend\n  const startNewGame = async () => {\n    try {\n      setMessage('Creating new game...');\n      const response = await fetch(`${BACKEND_URL}/api/games`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n      });\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      const data = await response.json();\n      setGameId(data.gameId);\n      setBoard(data.board);\n      setCurrentPlayer(data.currentPlayer);\n      setWinner(data.winner);\n      setMessage(`Game ${data.gameId} started! It's ${data.currentPlayer}'s turn.`);\n    } catch (error) {\n      console.error('Error starting new game:', error);\n      setMessage(`Error starting game: ${error.message}. Is backend running at ${BACKEND_URL}?`);\n    }\n  };\n\n  // Function to fetch the current game state from the backend\n  const fetchGameState = async () => {\n    if (!gameId) return; // Only fetch if a game ID exists\n    try {\n      const response = await fetch(`${BACKEND_URL}/api/games/${gameId}`);\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      const data = await response.json();\n      setBoard(data.board);\n      setCurrentPlayer(data.currentPlayer);\n      setWinner(data.winner);\n      if (data.winner) {\n        setMessage(data.winner === 'Draw' ? 'It\\'s a Draw!' : `Player ${data.winner} Wins!`);\n      } else {\n        setMessage(`Game ${gameId}. It's ${data.currentPlayer}'s turn.`);\n      }\n    } catch (error) {\n      console.error('Error fetching game state:', error);\n      setMessage(`Error fetching game state: ${error.message}.`);\n    }\n  };\n\n  // Function to handle a square click and send the move to the backend\n  const handleSquareClick = async (index) => {\n    if (board[index] || winner) {\n      return; // If square is already filled or game is over, do nothing\n    }\n\n    try {\n      setMessage(`Making move for ${currentPlayer}...`);\n      const response = await fetch(`${BACKEND_URL}/api/games/${gameId}/move`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ index, player: currentPlayer }),\n      });\n\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.message || `HTTP error! status: ${response.status}`);\n      }\n\n      const data = await response.json();\n      setBoard(data.board);\n      setCurrentPlayer(data.currentPlayer);\n      setWinner(data.winner);\n\n      if (data.winner) {\n        setMessage(data.winner === 'Draw' ? 'It\\'s a Draw!' : `Player ${data.winner} Wins!`);\n      } else {\n        setMessage(`Game ${gameId}. It's ${data.currentPlayer}'s turn.`);\n      }\n    } catch (error) {\n      console.error('Error making move:', error);\n      setMessage(`Error making move: ${error.message}`);\n    }\n  };\n\n  // Effect to start a new game when the component mounts\n  useEffect(() => {\n    startNewGame();\n  }, []); // Empty dependency array means this runs once on mount\n\n  // Effect to fetch game state periodically or after a move (optional, but good for sync)\n  // For simplicity, we're relying on the POST response for updates, but a GET poll could be added.\n  // useEffect(() => {\n  //   const interval = setInterval(() => {\n  //     if (gameId && !winner) {\n  //       fetchGameState();\n  //     }\n  //   }, 3000); // Poll every 3 seconds\n  //   return () => clearInterval(interval);\n  // }, [gameId, winner]);\n\n\n  // Square component for rendering individual cells\n  const Square = ({ value, onClick }) => (\n    <button\n      className=\"w-24 h-24 bg-white border-2 border-gray-300 rounded-lg flex items-center justify-center text-5xl font-bold text-gray-800 shadow-md hover:bg-gray-100 transition-colors duration-200 ease-in-out\"\n      onClick={onClick}\n    >\n      {value}\n    </button>\n  );\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-blue-500 to-purple-600 flex flex-col items-center justify-center p-4 font-inter\">\n      <style>\n        {`\n          @import url('https://fonts.googleapis.com/css2?family=Inter:wght@400;700&display=swap');\n          body { font-family: 'Inter', sans-serif; }\n        `}\n      </style>\n      <div className=\"bg-white p-8 rounded-xl shadow-2xl max-w-md w-full text-center\">\n        <h1 className=\"text-4xl font-bold text-gray-800 mb-6\">Tic-Tac-Toe</h1>\n        <p className=\"text-lg text-gray-600 mb-4\">{message}</p>\n\n        <div className=\"grid grid-cols-3 gap-4 mb-6\">\n          {board.map((value, i) => (\n            <Square key={i} value={value} onClick={() => handleSquareClick(i)} />\n          ))}\n        </div>\n\n        {winner && (\n          <button\n            className=\"bg-green-500 hover:bg-green-600 text-white font-bold py-3 px-6 rounded-lg shadow-lg transition-all duration-230 ease-in-out transform hover:scale-105 focus:outline-none focus:ring-4 focus:ring-green-300\"\n            onClick={startNewGame}\n          >\n            Play Again!\n          </button>\n        )}\n        {!winner && gameId && (\n            <button\n            className=\"bg-blue-500 hover:bg-blue-600 text-white font-bold py-3 px-6 rounded-lg shadow-lg transition-all duration-230 ease-in-out transform hover:scale-105 focus:outline-none focus:ring-4 focus:ring-blue-300\"\n            onClick={startNewGame}\n          >\n            New Game\n          </button>\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}